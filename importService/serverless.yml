# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: importserviceTask66-import-service
# app and org for use with dashboard.serverless.com

# plugins:
#  - serverless-plugin-stack-outputs


frameworkVersion: '2'

?
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1


  environment:
    SQS_URL:
      ${cf:importserviceTask66-dev.SQSQueueData}
    SNS_URL:
     ${cf:importserviceTask66-dev.SQSQueueData}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket/*"
      Resource: 
        - "arn:aws:s3:::${self:custom.s3Bucket}/*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:custom.s3Bucket}/*"
    
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource: ${cf:importserviceTask66-dev.SQSQueueArn} 
       



custom:
  s3Bucket: dev-stage-module6.6
  existing: true
  

 




    
     
      
     
     
       


        
       



# resources:
#   Resources:
#     ## Specifying the S3 Bucket
#     WebAppS3Bucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${self:custom.s3Bucket}
#         AccessControl: PublicRead
#     WebAppS3BucketPolicy:
#       Type: AWS::S3::BucketPolicy
#       Properties:
#         Bucket:
#           Ref: WebAppS3Bucket
#         PolicyDocument:
#           Statement:
#             - Sid: PublicReadGetObject
#               Effect: Allow
#               Principal: "*"
#               Action:
#               - s3:GetObject
#               - s3:PutObject
#               - s3:DeleteObject
#               Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
      

     
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  GetUploadUri:
    handler: getUploadUrl.getUploadUrl
    events:
      - http:
          method: get
          path: /getuploadurl
          cors: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "name" : "$input.params('name')"
                 
                }
 

  ImportFileParser:
    handler: importFileParser.fileParser
    events:
     - s3:
         bucket: ${self:custom.s3Bucket}
         event: s3:ObjectCreated:*
         rules:
          - prefix: uploaded/
         existing: true  

  hello:
    handler: handler.parsedFile
    events:
      - httpApi:
          method: get
          path: /parsedfile
          



  
       

# ##   The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

    
 

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
