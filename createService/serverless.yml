# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: importserviceTask66
useDotenv: true
plugins:
  
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1

 
  
  environment:
   TOPIC_ARN:
     Ref:
      - SNSTopic
   
   host: database-1.c0f3uj4ayzym.eu-west-1.rds.amazonaws.com
   port: 5432
   user: postgres
   database: postgres
   password: 123456789



# you can overwrite defaults here
#  stage: dev
#  region: us-east-1


  iamRoleStatements:
   - Effect: "Allow"  
     Action:
       - "sns:*" 
     Resource: 
      Ref:
       - SNSTopic
 

# you can define service wide environment variables here
 

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:


 catalogBatchProcess:
   handler: catalogBatchProcess.catalogBatchProcess
   events:
     - sqs:
         batchSize: 5
         arn:
           Fn::GetAtt:
             - SQSQueue
             - Arn
    


       


resources:
 Resources:
   SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:  catalogItemsQueue  

   SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
     TopicName: createProductTopic
     
   SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
     Endpoint: nameagasi@gmail.com
     Protocol: email
     TopicArn:
      Ref: SNSTopic 
      
      

 Outputs: 
  SQSQueueData: 
   Value: 
     Ref: SQSQueue 

  SNSData:
   Value:  
    Ref:SNSTopic

  
  SQSQueueArn:
    Value: 
      Fn::GetAtt: [SQSQueue,Arn]


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
